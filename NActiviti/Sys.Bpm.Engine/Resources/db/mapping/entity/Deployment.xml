<?xml version="1.0" encoding="UTF-8" ?>

<SmartSqlMap Scope="Sys.Workflow.Engine.Impl.Persistence.Entity.DeploymentEntityImpl"  xmlns="http://SmartSql.net/schemas/SmartSqlMap.xsd">

	<!-- DEPLOYMENT RESULTMAP -->

	<ResultMap Id="deploymentResultMap" ResultType="Sys.Workflow.Engine.Impl.Persistence.Entity.DeploymentEntityImpl,Sys.Bpm.Engine">
		<Result Property="id" Column="ID_" />
		<Result Property="name" Column="NAME_" />
		<Result Property="category" Column="CATEGORY_" />
		<Result Property="tenantId" Column="TENANT_ID_" />
		<Result Property="businessKey" Column="BUSINESS_KEY_" />
		<Result Property="deploymentTime" Column="DEPLOY_TIME_"/>
	</ResultMap>

	<!-- DEPLOYMENT INSERT -->

	<Insert Id="insertDeployment">
		insert into ACT_RE_DEPLOYMENT(ID_, NAME_, BUSINESS_KEY_, CATEGORY_, TENANT_ID_, DEPLOY_TIME_)
		values(#{id}, #{name}, #{businessKey}, #{category}, #{tenantId}, #{deploymentTime})
	</Insert>

	<Insert Id="bulkInsertDeployment">
		insert into ACT_RE_DEPLOYMENT(ID_, NAME_, BUSINESS_KEY_, CATEGORY_, TENANT_ID_, DEPLOY_TIME_)
		values
		<For  Prepend="" Key="p" Open="" Close="" Property="Items" Separator=",">
			(#{id},
			#{name},
			#{businessKey},
			#{category},
			#{tenantId},
			#{deploymentTime})
		</For>
	</Insert>

	<!-- DEPLOYMENT UPDATE -->

	<Update Id="updateDeployment">
		update ACT_RE_DEPLOYMENT set
		CATEGORY_ = #{category},
		BUSINESS_KEY_ = #{businessKey},
		TENANT_ID_ = #{tenantId}
		where ID_ = #{id}
	</Update>

	<!-- DEPLOYMENT DELETE -->

	<Delete Id="deleteDeployment">
		delete from ACT_RE_DEPLOYMENT where ID_ = #{id}
	</Delete>

	<!-- DEPLOYMENT SELECT -->
	<Statement Id="definitionVersionThanZeroOrNotIn">
		(exists (select 1 from ACT_RE_PROCDEF where RES.ID_ = DEPLOYMENT_ID_ and VERSION_ > 0) or RES.ID_ not in (select DEPLOYMENT_ID_ from ACT_RE_PROCDEF))
	</Statement>

	<Statement Id="selectDeploymentsByQueryCriteriaSql">
		from (select * from ACT_RE_DEPLOYMENT RES <Where>
			<IsTrue Property="deploymentId==null">
				<Include RefId="definitionVersionThanZeroOrNotIn" />
			</IsTrue>
		</Where>) RES
		<IsTrue Property="processDefinitionKey != null or processDefinitionKeyLike != null">
			inner join ACT_RE_PROCDEF PROCDEF on RES.ID_ = PROCDEF.DEPLOYMENT_ID_
		</IsTrue>
		<IsTrue Property="onlyDrafts">
			left join ACT_RE_PROCDEF PROCDEF on RES.ID_ = PROCDEF.DEPLOYMENT_ID_
		</IsTrue>
		<IsTrue Property="latestDeployment">
			inner join (select ${isNull, tenant_id_, ''} tenant_id_, name_, max(DEPLOY_TIME_) DEPLOY_TIME_ from (select * from ACT_RE_DEPLOYMENT RES where <Include RefId="definitionVersionThanZeroOrNotIn"/>) RES group by ${isNull, tenant_id_, ''}, name_) B on ${isNull, RES.tenant_id_, ''} = B.tenant_id_ and RES.name_= B.name_ and RES.DEPLOY_TIME_ = B.DEPLOY_TIME_
		</IsTrue>
		<Where>
			<IsTrue Property="deploymentId != null">
				RES.ID_ = #{deploymentId}
			</IsTrue>
			<IsTrue Property="CollectionUtil.IsNotEmpty(ids)">
				and RES.ID_ in
				<For Key="item" Index="index" Property="ids" Open="(" Separator="," Close=")">
					#{item}
				</For>
			</IsTrue>
			<IsTrue Property="name != null">
				and RES.NAME_ = #{name}
			</IsTrue>
			<IsTrue Property="nameLike != null">
				and RES.NAME_ like #{nameLike}
			</IsTrue>
			<IsTrue Property="businessKey != null">
				and RES.BUSINESS_KEY_ = #{businessKey}
			</IsTrue>
			<IsTrue Property="category != null">
				and RES.CATEGORY_ = #{category}
			</IsTrue>
			<IsTrue Property="categoryNotEquals != null">
				and ( RES.CATEGORY_ &lt;&gt; #{categoryNotEquals} OR RES.CATEGORY_ is null )
			</IsTrue>
			<IsTrue Property="tenantId != null">
				and RES.TENANT_ID_ = #{tenantId}
			</IsTrue>
			<IsTrue Property="tenantIdLike != null">
				and RES.TENANT_ID_ like #{tenantIdLike}
			</IsTrue>
			<IsTrue Property="withoutTenantId">
				and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
			</IsTrue>
			<IsTrue Property="processDefinitionKey != null">
				and PROCDEF.KEY_ = #{processDefinitionKey}
			</IsTrue>
			<IsTrue Property="processDefinitionKeyLike != null">
				and PROCDEF.KEY_ like #{processDefinitionKeyLike}
			</IsTrue>
		</Where>
	</Statement>

	<Select Id="selectDeployment" ResultMap="deploymentResultMap">
		select * from ACT_RE_DEPLOYMENT where ID_ = #{id}
	</Select>

	<Select Id="selectDeploymentsByQueryCriteria" ResultMap="deploymentResultMap">
		${limitBefore}
		select ${top100} RES.* from (select distinct ${top100} RES.* <IsTrue Property="onlyDrafts">,PROCDEF.ID_ as PROC_DEF_ID_</IsTrue> ${limitBetween}
		<Include RefId="selectDeploymentsByQueryCriteriaSql"/>
		) RES
		<Where>
			<IsTrue Property="onlyDrafts">
				RES.PROC_DEF_ID_ is null
			</IsTrue>
		</Where>
		${orderBy}
		${limitAfter}
	</Select>

	<Select Id="selectDeploymentDrafts" ResultMap="deploymentResultMap">
		select * from (select distinct  a.*, c.id_ proc_def_id_ from ACT_RE_DEPLOYMENT a left join ACT_RE_PROCDEF c on a.id_ = c.deployment_id_ where a.name_ = ${name}) RES where RES.proc_def_id_ is null
	</Select>

	<Select Id="selectDeploymentCountByQueryCriteria">
		select count(distinct RES.ID_) from (select RES.ID_ <IsTrue Property="onlyDrafts">,PROCDEF.ID_ as PROC_DEF_ID_</IsTrue>
		<Include RefId="selectDeploymentsByQueryCriteriaSql"/>
		) RES
		<Where>
			<IsTrue Property="onlyDrafts">
				RES.PROC_DEF_ID_ is null
			</IsTrue>
		</Where>
	</Select>

	<Select Id="selectDeploymentsByName" ResultMap="deploymentResultMap">
		select * from ACT_RE_DEPLOYMENT RES
		where NAME_=#{deploymentName} and <Include RefId="definitionVersionThanZeroOrNotIn" />
		order by RES.DEPLOY_TIME_ desc
	</Select>

	<Select Id="selectDeploymentById" ResultMap="deploymentResultMap">
		select * from ACT_RE_DEPLOYMENT where ID_ = #{id}
	</Select>

	<!-- mysql specific -->
	<Select Id="selectDeploymentsByQueryCriteria_mysql" ResultMap="deploymentResultMap">
		${limitBefore}
		select distinct ${top100} RES.* ${limitBetween}
		<Include RefId="selectDeploymentsByQueryCriteriaSql"/>
		${orderBy}
		${limitAfter}
	</Select>

	<Select Id="selectDeploymentByNativeQuery" ResultMap="deploymentResultMap">
		<IsTrue Property="resultType == 'LIST_PAGE'">
			${limitBefore}
		</IsTrue>
		${sql}
		<IsTrue Property="resultType == 'LIST_PAGE'">
			${limitAfter}
		</IsTrue>
	</Select>

	<Select Id="selectDeploymentByNativeQuery_mssql_or_db2" ResultMap="deploymentResultMap">
		<IsTrue Property="resultType == 'LIST_PAGE'">
			${limitBeforeNativeQuery}
		</IsTrue>
		${sql}
		<IsTrue Property="resultType == 'LIST_PAGE'">
			${limitAfter}
		</IsTrue>
	</Select>

	<Select Id="selectDeploymentCountByNativeQuery">
		${sql}
	</Select>
</SmartSqlMap>