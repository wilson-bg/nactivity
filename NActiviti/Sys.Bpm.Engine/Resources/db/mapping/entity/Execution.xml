<?xml version="1.0" encoding="UTF-8" ?>

<SmartSqlMap Scope="Sys.Workflow.Engine.Impl.Persistence.Entity.ExecutionEntityImpl"  xmlns="http://SmartSql.net/schemas/SmartSqlMap.xsd">

	<!-- EXECUTION RESULTMAP -->

	<ResultMap Id="executionResultMap" ResultType="Sys.Workflow.Engine.Impl.Persistence.Entity.ExecutionEntityImpl,Sys.Bpm.Engine">
		<Result Property="id" Column="ID_" />
		<Result Property="revision" Column="REV_" />
		<Result Property="processInstanceId" Column="PROC_INST_ID_" />
		<Result Property="businessKey" Column="BUSINESS_KEY_" />
		<Result Property="processDefinitionId" Column="PROC_DEF_ID_" />
		<Result Property="activityId" Column="ACT_ID_" />
		<Result Property="isActive" Column="IS_ACTIVE_" />
		<Result Property="isConcurrent" Column="IS_CONCURRENT_" />
		<Result Property="isScope" Column="IS_SCOPE_" />
		<Result Property="isEventScope" Column="IS_EVENT_SCOPE_" />
		<Result Property="isMultiInstanceRoot" Column="IS_MI_ROOT_" />
		<Result Property="parentId" Column="PARENT_ID_" />
		<Result Property="superExecutionId" Column="SUPER_EXEC_" />
		<Result Property="rootProcessInstanceId" Column="ROOT_PROC_INST_ID_" />
		<Result Property="suspensionState" Column="SUSPENSION_STATE_" />
		<Result Property="tenantId" Column="TENANT_ID_" />
		<Result Property="name" Column="NAME_" />
		<Result Property="startTime" Column="START_TIME_" />
		<Result Property="startUserId" Column="START_USER_ID_" />
		<Result Property="startUser" Column="START_USER_" />
		<Result Property="isCountEnabled" Column="IS_COUNT_ENABLED_" />
		<Result Property="eventSubscriptionCount" Column="EVT_SUBSCR_COUNT_" />
		<Result Property="taskCount" Column="TASK_COUNT_" />
		<Result Property="jobCount" Column="JOB_COUNT_" />
		<Result Property="timerJobCount" Column="TIMER_JOB_COUNT_" />
		<Result Property="suspendedJobCount" Column="SUSP_JOB_COUNT_" />
		<Result Property="deadLetterJobCount" Column="DEADLETTER_JOB_COUNT_" />
		<Result Property="variableCount" Column="VAR_COUNT_" />
		<Result Property="identityLinkCount" Column="ID_LINK_COUNT_" />
	</ResultMap>


	<!-- Lowercase 'columns', as they are filled in during a query and are not mapped directly to a table column -->

	<ResultMap Id="processInstanceResultMap" ResultType="Sys.Workflow.Engine.Impl.Persistence.Entity.ExecutionEntityImpl,Sys.Bpm.Engine">
		<Result Property="id" Column="ID_" />
		<Result Property="revision" Column="REV_" />
		<Result Property="processInstanceId" Column="PROC_INST_ID_" />
		<Result Property="businessKey" Column="BUSINESS_KEY_" />
		<Result Property="processDefinitionId" Column="PROC_DEF_ID_" />
		<Result Property="processDefinitionName" Column="ProcessDefinitionName" />
		<Result Property="processDefinitionKey" Column="ProcessDefinitionKey" />
		<Result Property="processDefinitionVersion" Column="ProcessDefinitionVersion" />
		<Result Property="deploymentId" Column="DeploymentId" />
		<Result Property="activityId" Column="ACT_ID_" />
		<Result Property="isActive" Column="IS_ACTIVE_" />
		<Result Property="isConcurrent" Column="IS_CONCURRENT_" />
		<Result Property="isScope" Column="IS_SCOPE_" />
		<Result Property="isEventScope" Column="IS_EVENT_SCOPE_" />
		<Result Property="isMultiInstanceRoot" Column="IS_MI_ROOT_" />
		<Result Property="parentId" Column="PARENT_ID_" />
		<Result Property="superExecutionId" Column="SUPER_EXEC_" />
		<Result Property="rootProcessInstanceId" Column="ROOT_PROC_INST_ID_" />
		<Result Property="suspensionState" Column="SUSPENSION_STATE_" />
		<Result Property="tenantId" Column="TENANT_ID_" />
		<Result Property="name" Column="NAME_" />
		<Result Property="lockTime" Column="LOCK_TIME_" />
		<Result Property="startTime" Column="START_TIME_" />
		<Result Property="startUserId" Column="START_USER_ID_" />
		<Result Property="startUser" Column="START_USER_" />
		<Result Property="isCountEnabled" Column="IS_COUNT_ENABLED_" />
		<Result Property="eventSubscriptionCount" Column="EVT_SUBSCR_COUNT_" />
		<Result Property="taskCount" Column="TASK_COUNT_" />
		<Result Property="jobCount" Column="JOB_COUNT_" />
		<Result Property="timerJobCount" Column="TIMER_JOB_COUNT_" />
		<Result Property="suspendedJobCount" Column="SUSP_JOB_COUNT_" />
		<Result Property="deadLetterJobCount" Column="DEADLETTER_JOB_COUNT_" />
		<Result Property="variableCount" Column="VAR_COUNT_" />
		<Result Property="identityLinkCount" Column="ID_LINK_COUNT_" />
	</ResultMap>

	<!--<Results Property="queryVariables" Column="EXECUTION_ID_" javaType="ArrayList" ofType="Sys.Workflow.Engine.Impl.Persistence.Entity.VariableInstanceEntityImpl">
      <id property="id" column="VAR_ID_"/>
      <Result Property="name" Column="VAR_NAME_" />
      <Result Property="type" Column="VAR_TYPE_" />
      <Result Property="revision" Column="VAR_REV_" />
      <Result Property="processInstanceId" Column="VAR_PROC_INST_ID_" />
      <Result Property="executionId" Column="VAR_EXECUTION_ID_" />
      <Result Property="taskId" Column="VAR_TASK_ID_" />
      <Result Property="byteArrayRef" Column="VAR_BYTEARRAY_ID_" />
      <Result Property="doubleValue" Column="VAR_DOUBLE_" />
      <Result Property="textValue" Column="VAR_TEXT_" />
      <Result Property="textValue2" Column="VAR_TEXT2_" />
      <Result Property="longValue" Column="VAR_LONG_" />
    </Results>-->

	<ResultMap Id="executionAndVariablesResultMap" ResultType="Sys.Workflow.Engine.Impl.Persistence.Entity.ExecutionEntityImpl,Sys.Bpm.Engine">
		<Result Property="id" Column="ID_" />
		<Result Property="revision" Column="REV_" />
		<Result Property="processInstanceId" Column="PROC_INST_ID_" />
		<Result Property="businessKey" Column="BUSINESS_KEY_" />
		<Result Property="processDefinitionId" Column="PROC_DEF_ID_" />
		<Result Property="activityId" Column="ACT_ID_" />
		<Result Property="isActive" Column="IS_ACTIVE_" />
		<Result Property="isConcurrent" Column="IS_CONCURRENT_" />
		<Result Property="isScope" Column="IS_SCOPE_" />
		<Result Property="isEventScope" Column="IS_EVENT_SCOPE_" />
		<Result Property="isMultiInstanceRoot" Column="IS_MI_ROOT_" />
		<Result Property="parentId" Column="PARENT_ID_" />
		<Result Property="superExecutionId" Column="SUPER_EXEC_" />
		<Result Property="rootProcessInstanceId" Column="ROOT_PROC_INST_ID_" />
		<Result Property="suspensionState" Column="SUSPENSION_STATE_" />
		<Result Property="tenantId" Column="TENANT_ID_" />
		<Result Property="name" Column="NAME_" />
		<Result Property="startTime" Column="START_TIME_" />
		<Result Property="startUserId" Column="START_USER_ID_" />
		<Result Property="startUser" Column="START_USER_" />
		<Result Property="isCountEnabled" Column="IS_COUNT_ENABLED_" />
		<Result Property="eventSubscriptionCount" Column="EVT_SUBSCR_COUNT_" />
		<Result Property="taskCount" Column="TASK_COUNT_" />
		<Result Property="jobCount" Column="JOB_COUNT_" />
		<Result Property="timerJobCount" Column="TIMER_JOB_COUNT_" />
		<Result Property="suspendedJobCount" Column="SUSP_JOB_COUNT_" />
		<Result Property="deadLetterJobCount" Column="DEADLETTER_JOB_COUNT_" />
		<Result Property="variableCount" Column="VAR_COUNT_" />
		<Result Property="identityLinkCount" Column="ID_LINK_COUNT_" />

	</ResultMap>

	<!--<collection property="queryVariables" column="EXECUTION_ID_" javaType="ArrayList" ofType="Sys.Workflow.Engine.Impl.Persistence.Entity.VariableInstanceEntityImpl">
      <id property="id" column="VAR_ID_"/>
      <Result Property="name" Column="VAR_NAME_" />
      <Result Property="type" Column="VAR_TYPE_" />
      <Result Property="revision" Column="VAR_REV_" />
      <Result Property="processInstanceId" Column="VAR_PROC_INST_ID_" />
      <Result Property="executionId" Column="VAR_EXECUTION_ID_" />
      <Result Property="taskId" Column="VAR_TASK_ID_" />
      <Result Property="byteArrayRef" Column="VAR_BYTEARRAY_ID_" />
      <Result Property="doubleValue" Column="VAR_DOUBLE_" />
      <Result Property="textValue" Column="VAR_TEXT_" />
      <Result Property="textValue2" Column="VAR_TEXT2_" />
      <Result Property="longValue" Column="VAR_LONG_" />
    </collection>-->

	<ResultMap Id="processInstanceAndVariablesResultMap" ResultType="Sys.Workflow.Engine.Impl.Persistence.Entity.ExecutionEntityImpl,Sys.Bpm.Engine">
		<Result Property="id" Column="ID_" />
		<Result Property="revision" Column="REV_" />
		<Result Property="processInstanceId" Column="PROC_INST_ID_" />
		<Result Property="businessKey" Column="BUSINESS_KEY_" />
		<Result Property="processDefinitionId" Column="PROC_DEF_ID_" />
		<Result Property="processDefinitionName" Column="ProcessDefinitionName" />
		<Result Property="processDefinitionKey" Column="ProcessDefinitionKey" />
		<Result Property="processDefinitionVersion" Column="ProcessDefinitionVersion" />
		<Result Property="deploymentId" Column="DeploymentId" />
		<Result Property="activityId" Column="ACT_ID_" />
		<Result Property="isActive" Column="IS_ACTIVE_" />
		<Result Property="isConcurrent" Column="IS_CONCURRENT_" />
		<Result Property="isScope" Column="IS_SCOPE_" />
		<Result Property="isEventScope" Column="IS_EVENT_SCOPE_" />
		<Result Property="isMultiInstanceRoot" Column="IS_MI_ROOT_" />
		<Result Property="parentId" Column="PARENT_ID_" />
		<Result Property="superExecutionId" Column="SUPER_EXEC_" />
		<Result Property="rootProcessInstanceId" Column="ROOT_PROC_INST_ID_" />
		<Result Property="suspensionState" Column="SUSPENSION_STATE_" />
		<Result Property="tenantId" Column="TENANT_ID_" />
		<Result Property="name" Column="NAME_" />
		<Result Property="lockTime" Column="LOCK_TIME_" />
		<Result Property="startTime" Column="START_TIME_" />
		<Result Property="startUserId" Column="START_USER_ID_" />
		<Result Property="startUser" Column="START_USER_" />
		<Result Property="isCountEnabled" Column="IS_COUNT_ENABLED_" />
		<Result Property="eventSubscriptionCount" Column="EVT_SUBSCR_COUNT_" />
		<Result Property="taskCount" Column="TASK_COUNT_" />
		<Result Property="jobCount" Column="JOB_COUNT_" />
		<Result Property="timerJobCount" Column="TIMER_JOB_COUNT_" />
		<Result Property="suspendedJobCount" Column="SUSP_JOB_COUNT_" />
		<Result Property="deadLetterJobCount" Column="DEADLETTER_JOB_COUNT_" />
		<Result Property="variableCount" Column="VAR_COUNT_" />
		<Result Property="identityLinkCount" Column="ID_LINK_COUNT_" />

	</ResultMap>

	<!-- EXECUTION INSERT -->

	<Insert Id="insertExecution" >
		insert into ACT_RU_EXECUTION (ID_, REV_, PROC_INST_ID_, BUSINESS_KEY_, PROC_DEF_ID_, ACT_ID_, IS_ACTIVE_, IS_CONCURRENT_, IS_SCOPE_,IS_EVENT_SCOPE_, IS_MI_ROOT_, PARENT_ID_, SUPER_EXEC_, ROOT_PROC_INST_ID_, SUSPENSION_STATE_, TENANT_ID_, NAME_, START_TIME_, START_USER_ID_, START_USER_, IS_COUNT_ENABLED_, EVT_SUBSCR_COUNT_, TASK_COUNT_, JOB_COUNT_, TIMER_JOB_COUNT_, SUSP_JOB_COUNT_, DEADLETTER_JOB_COUNT_, VAR_COUNT_, ID_LINK_COUNT_)
		values (
		#{id},
		1,
		#{processInstanceId},
		#{businessKey},
		#{processDefinitionId},
		#{activityId},
		#{isActive},
		#{isConcurrent},
		#{isScope},
		#{isEventScope},
		#{isMultiInstanceRoot},
		#{parentId},
		#{superExecutionId},
		#{rootProcessInstanceId},
		#{suspensionState},
		#{tenantId},
		#{name},
		#{startTime},
		#{startUserId},
		#{startUser},
		#{isCountEnabled},
		#{eventSubscriptionCount},
		#{taskCount},
		#{jobCount},
		#{timerJobCount},
		#{suspendedJobCount},
		#{deadLetterJobCount},
		#{variableCount},
		#{identityLinkCount}
		)
	</Insert>

	<Insert Id="bulkInsertExecution" >
		insert into ACT_RU_EXECUTION (ID_, REV_, PROC_INST_ID_, BUSINESS_KEY_, PROC_DEF_ID_, ACT_ID_, IS_ACTIVE_, IS_CONCURRENT_, IS_SCOPE_,IS_EVENT_SCOPE_, IS_MI_ROOT_, PARENT_ID_, SUPER_EXEC_, ROOT_PROC_INST_ID_, SUSPENSION_STATE_, TENANT_ID_, NAME_, START_TIME_, START_USER_ID_, START_USER_, IS_COUNT_ENABLED_, EVT_SUBSCR_COUNT_, TASK_COUNT_, JOB_COUNT_, TIMER_JOB_COUNT_, SUSP_JOB_COUNT_, DEADLETTER_JOB_COUNT_, VAR_COUNT_, ID_LINK_COUNT_)
		values
		<For Property="Items" Key="index" Separator=",">
			(#{id},
			1,
			#{processInstanceId},
			#{businessKey},
			#{processDefinitionId},
			#{activityId},
			#{isActive},
			#{isConcurrent},
			#{isScope},
			#{isEventScope},
			#{isMultiInstanceRoot},
			#{parentId},
			#{superExecutionId},
			#{rootProcessInstanceId},
			#{suspensionState},
			#{tenantId},
			#{name},
			#{startTime},
			#{startUserId},
			#{startUser},
			#{isCountEnabled},
			#{eventSubscriptionCount},
			#{taskCount},
			#{jobCount},
			#{timerJobCount},
			#{suspendedJobCount},
			#{deadLetterJobCount},
			#{variableCount},
			#{identityLinkCount})
		</For>
	</Insert>

	<!-- EXECUTION UPDATE -->

	<Update Id="updateExecution" >
		update ACT_RU_EXECUTION set
		REV_ = #{revisionNext},
		BUSINESS_KEY_ = #{businessKey},
		PROC_DEF_ID_ = #{processDefinitionId},
		ACT_ID_ = #{activityId},
		IS_ACTIVE_ = #{isActive},
		IS_CONCURRENT_ = #{isConcurrent},
		IS_SCOPE_ = #{isScope},
		IS_EVENT_SCOPE_ = #{isEventScope},
		IS_MI_ROOT_ = #{isMultiInstanceRoot},
		PARENT_ID_ = #{parentId},
		SUPER_EXEC_ = #{superExecutionId},
		ROOT_PROC_INST_ID_ = #{rootProcessInstanceId},
		SUSPENSION_STATE_ = #{suspensionState},
		NAME_ = #{name},
		IS_COUNT_ENABLED_ = #{isCountEnabled},
		EVT_SUBSCR_COUNT_ = #{eventSubscriptionCount},
		TASK_COUNT_ = #{taskCount},
		JOB_COUNT_ = #{jobCount},
		TIMER_JOB_COUNT_ = #{timerJobCount},
		SUSP_JOB_COUNT_ = #{suspendedJobCount},
		DEADLETTER_JOB_COUNT_ = #{deadLetterJobCount},
		VAR_COUNT_ = #{variableCount},
		ID_LINK_COUNT_ = #{identityLinkCount}
		where ID_ = #{id}
		and REV_ = #{revision}
	</Update>

	<Update Id="updateExecutionTenantIdForDeployment" >
		update ACT_RU_EXECUTION set
		TENANT_ID_ = #{tenantId}
		where
		ID_ in (
		SELECT E.ID_ from ACT_RU_EXECUTION E
		inner join ACT_RE_PROCDEF P on E.PROC_DEF_ID_  = P.ID_
		inner join ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_
		where D.ID_ = #{deploymentId}
		)
	</Update>

	<Update Id="updateProcessInstanceLockTime" >
		update ACT_RU_EXECUTION
		set
		LOCK_TIME_ = #{lockTime}
		where ID_ = #{id}
		and (LOCK_TIME_ is null OR LOCK_TIME_ &lt; #{expirationTime})
	</Update>

	<Update Id="clearProcessInstanceLockTime" >
		update ACT_RU_EXECUTION
		set
		LOCK_TIME_ = null
		where ID_ = #{id}
	</Update>

	<Update Id="updateExecutionRelatedEntityCountEnabled" >
		update ACT_RU_EXECUTION
		set IS_COUNT_ENABLED_ = #{isCountEnabled}
	</Update>

	<!-- EXECUTION DELETE -->

	<Delete Id="deleteExecution" >
		delete from ACT_RU_EXECUTION where ID_ = #{id} and REV_ = #{revision}
	</Delete>

	<Delete Id="bulkDeleteWithRevisionExecution" >
		delete from ACT_RU_EXECUTION where 
		<For Property="Items" Key="P" Separator=" or ">
			ID_ = #{id} and REV_ = #{revision}
		</For>
	</Delete>

	<Delete Id="bulkDeleteExecution" >
		delete from ACT_RU_EXECUTION where
		<For Key="p" Property="Items" Separator=" or ">
			ID_ = #{id}
		</For>
	</Delete>

	<!-- EXECUTION SELECT -->

	<Statement Id="executionVariableOperator">
		<Switch>
			<Case Test="queryVariableValue.operator=='EQUALS'">=</Case>
			<Case Test="queryVariableValue.operator=='EQUALS_IGNORE_CASE'">=</Case>
			<Case Test="queryVariableValue.operator=='NOT_EQUALS'">&lt;&gt;</Case>
			<Case Test="queryVariableValue.operator=='NOT_EQUALS_IGNORE_CASE'">&lt;&gt;</Case>
			<Case Test="queryVariableValue.operator=='GREATER_THAN'">&gt;</Case>
			<Case Test="queryVariableValue.operator=='GREATER_THAN_OR_EQUAL'">&gt;=</Case>
			<Case Test="queryVariableValue.operator=='LESS_THAN'">&lt;</Case>
			<Case Test="queryVariableValue.operator=='LESS_THAN_OR_EQUAL'">&lt;=</Case>
		</Switch>
	</Statement>

	<Statement Id="commonSelectExecutionsByQueryCriteriaSql">
		<For Property="QueryVariableValues" Key="p">
			<Switch>
				<Case Property="queryVariableValue.local">
					inner join ACT_RU_VARIABLE A${index} on RES.ID_ = A${index}.EXECUTION_ID_
				</Case>
				<Default>
					inner join ACT_RU_VARIABLE A${index} on RES.PROC_INST_ID_ = A${index}.PROC_INST_ID_
				</Default>
			</Switch>
		</For>
		<For Property="OrQueryObjects" Key="p">
			<IsNotNull Test="orQueryObject.processDefinitionId != null or orQueryObject.processDefinitionKey != null or orQueryObject.processDefinitionVersion != null or orQueryObject.processDefinitionCategory != null or orQueryObject.processDefinitionName != null or (orQueryObject.processDefinitionIds != null and CollectionUtil.IsNotEmpty(orQueryObject.processDefinitionIds)) or (orQueryObject.processDefinitionKeys != null and !orQueryObject.processDefinitionKeys.isEmpty())">
				inner join ACT_RE_PROCDEF P_OR${orIndex} on RES.PROC_DEF_ID_ = P_OR${orIndex}.ID_
			</IsNotNull>
			<IsNotNull Test="orQueryObject.queryVariableValues != null and CollectionUtil.IsNotEmpty(orQueryObject.queryVariableValues)">
				left outer join ACT_RU_VARIABLE A_OR${orIndex} on RES.PROC_INST_ID_ = A_OR${orIndex}.PROC_INST_ID_
			</IsNotNull>
			<IsNotNull Test="orQueryObject.deploymentId != null or (orQueryObject.deploymentIds != null and CollectionUtil.IsNotEmpty(orQueryObject.DeploymentIds))">
				left outer join ACT_RE_PROCDEF DEPLOY_P_OR${orIndex} ON RES.PROC_DEF_ID_ = DEPLOY_P_OR${orIndex}.ID_
			</IsNotNull>
		</For>
		<IsTrue Property="CollectionUtil.IsNotEmpty(eventSubscriptions)">
			<For Property="eventSubscriptions" Index="index" Key="eventSubscriptionValue">
				inner join ACT_RU_EVENT_SUBSCR EVT${index} on RES.ID_ = EVT${index}.EXECUTION_ID_
			</For>
		</IsTrue>
		<IsNotEmpty Property="businessKey">
			<IsNotNull Property="includeChildExecutionsWithBusinessKeyQuery != null">
				inner join ACT_RU_EXECUTION INST on RES.PROC_INST_ID_ = INST.ID_
			</IsNotNull>
		</IsNotEmpty>
		<If Property="onlyProcessInstances and IsWithException">
			left outer join ACT_RU_TIMER_JOB JOB ON RES.PROC_INST_ID_ = JOB.PROCESS_INSTANCE_ID_
		</If>
		<Where>
			<IsTrue Property="onlyProcessInstances">
				RES.PARENT_ID_ is null
			</IsTrue>
			<IsNotEmpty Property="processDefinitionId">
				and P.ID_ = #{processDefinitionId}
			</IsNotEmpty>
			<IsNotNull Property="processDefinitionIds != null">
				<IsNotEmpty Property="processDefinitionIds">
					and P.ID_ in
					<For Key="item" Index="index" Property="processDefinitionIds" Open="(" Separator="," Close=")">
						#{item}
					</For>
				</IsNotEmpty>
			</IsNotNull>
			<IsNotEmpty Property="processDefinitionKey">
				and P.KEY_ = #{processDefinitionKey}
			</IsNotEmpty>
			<IsTrue Property="processDefinitionKeys != null">
				<IsNotEmpty Property="processDefinitionKeys">
					and P.KEY_ in
					<For Key="item" Index="index" Property="processDefinitionKeys" Open="(" Separator="," Close=")">
						#{item}
					</For>
				</IsNotEmpty>
			</IsTrue>
			<IsNotNull Property="processDefinitionCategory">
				and P.CATEGORY_ = #{processDefinitionCategory}
			</IsNotNull>
			<IsNotNull Property="processDefinitionName">
				and P.NAME_ = #{processDefinitionName}
			</IsNotNull>
			<IsNotNull Property="processDefinitionVersion">
				and P.VERSION_ = #{processDefinitionVersion}
			</IsNotNull>
			<IsNotNull Property="executionId ">
				and RES.ID_ = #{executionId}
			</IsNotNull>
			<IsNotNull Property="processInstanceId">
				and RES.PROC_INST_ID_ = #{processInstanceId}
			</IsNotNull>
			<IsNotNull Property="rootProcessInstanceId">
				and RES.ROOT_PROC_INST_ID_ = #{rootProcessInstanceId}
			</IsNotNull>
			<IsNotNull Property="processInstanceIds">
				<IsNotEmpty Propert="processInstanceIds">
					and RES.PROC_INST_ID_ in
					<For Key="item" Index="index" Property="processInstanceIds" Open="(" Separator="," Close=")">
						#{item}
					</For>
				</IsNotEmpty>
			</IsNotNull>
			<IsNotNull Property="businessKey">
				<IsFalse Property="includeChildExecutionsWithBusinessKeyQuery">
					and RES.BUSINESS_KEY_ = #{businessKey}
				</IsFalse>
			</IsNotNull>
			<IsNotNull Property="businessKey">
				<IsTrue Property="includeChildExecutionsWithBusinessKeyQuery">
					and INST.BUSINESS_KEY_ = #{businessKey}
				</IsTrue>
			</IsNotNull>
			<IsNotNull Property="activityId">
				and RES.ACT_ID_ = #{activityId} and RES.IS_ACTIVE_ = #{isActive}
			</IsNotNull>
			<IsNotNull Property="parentId">
				and RES.PARENT_ID_ = #{parentId}
			</IsNotNull>
			<IsTrue Property="onlyChildExecutions">
				and RES.PARENT_ID_ is not null
			</IsTrue>
			<IsTrue Property="onlySubProcessExecutions">
				and ((RES.PARENT_ID_ is not null or RES.SUPER_EXEC_ is not null) and RES.IS_SCOPE_ = #{onlySubProcessExecutions})
			</IsTrue>
			<IsTrue Property="onlyProcessInstanceExecutions">
				and RES.PARENT_ID_ is null
			</IsTrue>
			<IsNotNull Property="deploymentId">
				and P.DEPLOYMENT_ID_ = #{deploymentId}
			</IsNotNull>
			<IsNotNull Property="deploymentIds">
				<IsNotEmpty Property="deploymentIds">
					and P.DEPLOYMENT_ID_ IN
					<For Key="deployment" Index="index" Property="deploymentIds" Open="(" Separator="," Close=")">
						#{deployment}
					</For>
				</IsNotEmpty>
			</IsNotNull>
			<IsNotNull Property="superProcessInstanceId">
				<!-- A sub process instance is stored under a certain *execution*, potentially nested.
             A sub process instance is NOT stored under the process instanc, hence the following: -->
				and RES.SUPER_EXEC_ IN (select ID_ from ACT_RU_EXECUTION where PROC_INST_ID_ = #{superProcessInstanceId})
			</IsNotNull>
			<IsNotNull Property="subProcessInstanceId">
				and RES.ID_ = (select PROC_INST_ID_ from ACT_RU_EXECUTION where ID_ = (select SUPER_EXEC_ from ACT_RU_EXECUTION where ID_ = #{subProcessInstanceId}))
			</IsNotNull>
			<IsNotNull Property="excludeSubprocesses">
				and RES.SUPER_EXEC_ is null
			</IsNotNull>
			<IsNotNull Property="suspensionState">
				<IsTrue Property="suspensionState.stateCode==1">
					and (RES.SUSPENSION_STATE_ = 1)
				</IsTrue>
				<IsTrue Property="suspensionState.stateCode==2">
					and (RES.SUSPENSION_STATE_ = 2)
				</IsTrue>
			</IsNotNull>
			<IsNotNull Property="tenantId">
				and RES.TENANT_ID_ = #{tenantId}
			</IsNotNull>
			<IsNotNull Property="tenantIdLike">
				and RES.TENANT_ID_ like #{tenantIdLike}
			</IsNotNull>
			<IsTrue Property="withoutTenantId">
				and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
			</IsTrue>
			<IsNotNull Property="name">
				and RES.NAME_ = #{name}
			</IsNotNull>
			<IsNotNull Property="nameLike">
				and RES.NAME_ like #{nameLike}${wildcardEscapeClause}
			</IsNotNull>
			<IsNotNull Property="nameLikeIgnoreCase">
				and lower(RES.NAME_) like #{nameLikeIgnoreCase}${wildcardEscapeClause}
			</IsNotNull>
			<IsNotNull Property="involvedUser">
				and EXISTS(select ID_ from ACT_RU_IDENTITYLINK I where I.PROC_INST_ID_ = RES.ID_ and I.USER_ID_ = #{involvedUser})
			</IsNotNull>
			<!-- PLEASE NOTE: If you change anything have a look into the HistoricVariableInstance & HistoricProcessInstance, the same query object is used there! -->
			<For Property="queryVariableValues" Index="index" Key="queryVariableValue">
				<IsNotNull Property="!queryVariableValue.local">
					<!-- When process instance variable is queried for, only process variables are taken into account -->
					and A${index}.EXECUTION_ID_ = A${index}.PROC_INST_ID_
				</IsNotNull>
				<IsNotNull Property="queryVariableValue.name != null">
					<!-- Match-all variable-names when name is null -->
					and A${index}.NAME_= #{queryVariableValue.name}
				</IsNotNull>
				<IsNotNull Property="queryVariableValue.type != 'null'">
					<!-- When operator is not-equals or type of value is null, type doesn't matter! -->
					and A${index}.TYPE_ = #{queryVariableValue.type}
				</IsNotNull>
				<IsNotNull Property="queryVariableValue.textValue != null and queryVariableValue.longValue == null and queryVariableValue.doubleValue == null">
					<Switch>
						<Case Property="queryVariableValue.operator == 'EQUALS_IGNORE_CASE' or queryVariableValue.operator == 'NOT_EQUALS_IGNORE_CASE' or queryVariableValue.operator == 'LIKE_IGNORE_CASE'">
							and lower(A${index}.TEXT_)
						</Case>
						<Default>
							and A${index}.TEXT_
						</Default>
					</Switch>
					<Switch>
						<Case Property="queryVariableValue.operator == 'LIKE' or queryVariableValue.operator == 'LIKE_IGNORE_CASE'">LIKE</Case>
						<Default>
							<Include RefId="executionVariableOperator" />
						</Default>
					</Switch>
					#{queryVariableValue.textValue}
					<Switch>
						<Case Property="queryVariableValue.operator == 'LIKE' or queryVariableValue.operator == 'LIKE_IGNORE_CASE'">
							${wildcardEscapeClause}
						</Case>
					</Switch>
				</IsNotNull>
				<IsNotNull Property="queryVariableValue.textValue2 != null">
					and A${index}.TEXT2_
					<Switch>
						<Case Property="queryVariableValue.operator == 'LIKE'">LIKE</Case>
						<Default>
							<Include RefId="executionVariableOperator" />
						</Default>
					</Switch>
					#{queryVariableValue.textValue2}
					<Switch>
						<Case Property="queryVariableValue.operator == 'LIKE'">
							${wildcardEscapeClause}
						</Case>
					</Switch>
				</IsNotNull>
				<IsNotNull Property="queryVariableValue.longValue != null">
					and A${index}.LONG_
					<Include RefId="executionVariableOperator" />
					#{queryVariableValue.longValue}
				</IsNotNull>
				<IsNotNull Property="queryVariableValue.doubleValue != null">
					and A${index}.DOUBLE_
					<Include RefId="executionVariableOperator" />
					#{queryVariableValue.doubleValue}
				</IsNotNull>
				<!-- Null variable type -->
				<IsNotNull Property="queryVariableValue.textValue == null and queryVariableValue.textValue2 == null and queryVariableValue.longValue == null and queryVariableValue.doubleValue == null">
					<Switch>
						<Case Property="queryVariableValue.operator == 'NOT_EQUALS'">
							and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)
						</Case>
						<Default>
							and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null
						</Default>
					</Switch>
				</IsNotNull>
			</For>
			<!-- event subscriptions -->
			<IsTrue Property="CollectionUtil.IsNotEmpty(eventSubscriptions)">
				<For Property="eventSubscriptions" Index="index" Key="eventSubscriptionValue">
					and (EVT${index}.EVENT_TYPE_ = #{eventSubscriptions[${index}].eventType} and EVT${index}.EVENT_NAME_ = #{eventSubscriptions[${index}].eventName})
				</For>
			</IsTrue>
			<For Key="orQueryObject" Index="orIndex" Property="orQueryObjects">
				and
				<If Test="orQueryObject.processDefinitionId != null">
					P_OR${orIndex}.ID_ = #{orQueryObject.processDefinitionId}
				</If>
				<If Test="orQueryObject.processDefinitionIds != null and CollectionUtil.IsNotEmpty(orQueryObject.processDefinitionIds)">
					or P_OR${orIndex}.ID_ in
					<For Key="item" Index="index" Property="orQueryObject.processDefinitionIds" Open="(" Separator="," Close=")">
						#{item}
					</For>
				</If>
				<If Test="orQueryObject.processDefinitionKey != null">
					or P_OR${orIndex}.KEY_ = #{orQueryObject.processDefinitionKey}
				</If>
				<If Test="orQueryObject.processDefinitionKeys != null and CollectionUtil.IsNotEmpty(orQueryObject.processDefinitionKeys)">
					or P_OR${orIndex}.KEY_ in
					<For Key="item" Index="index" Property="orQueryObject.processDefinitionKeys" Open="(" Separator="," Close=")">
						#{item}
					</For>
				</If>
				<If Test="orQueryObject.processDefinitionCategory != null">
					or P_OR${orIndex}.CATEGORY_ = #{orQueryObject.processDefinitionCategory}
				</If>
				<If Test="orQueryObject.processDefinitionName != null">
					or P_OR${orIndex}.NAME_ = #{orQueryObject.processDefinitionName}
				</If>
				<If Test="orQueryObject.processDefinitionVersion != null">
					or P_OR${orIndex}.VERSION_ = #{orQueryObject.processDefinitionVersion}
				</If>
				<If Test="orQueryObject.executionId != null">
					or RES.ID_ = #{orQueryObject.executionId}
				</If>
				<If Test="orQueryObject.processInstanceId != null">
					or RES.PROC_INST_ID_ = #{orQueryObject.processInstanceId}
				</If>
				<If Test="orQueryObject.processInstanceIds != null and CollectionUtil.IsNotEmpty(orQueryObject.processInstanceIds)">
					or RES.PROC_INST_ID_ in
					<For Key="item" Index="index" Property="orQueryObject.processInstanceIds" Open="(" Separator="," Close=")">
						#{item}
					</For>
				</If>
				<If Test="orQueryObject.businessKey != null">
					or RES.BUSINESS_KEY_ = #{orQueryObject.businessKey}
				</If>
				<If Test="orQueryObject.activityId != null">
					or (RES.ACT_ID_ = #{orQueryObject.activityId} and RES.IS_ACTIVE_ = #{isActive})
				</If>
				<If Test="orQueryObject.parentId != null">
					or RES.PARENT_ID_ = #{orQueryObject.parentId}
				</If>
				<If Test="orQueryObject.deploymentId != null">
					or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ = #{orQueryObject.deploymentId}
				</If>
				<If Test="orQueryObject.deploymentIds != null and CollectionUtil.IsNotEmpty(orQueryObject.deploymentIds)">
					or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ IN
					<For Key="deployment" Index="index" Property="orQueryObject.deploymentIds" Open="(" Separator="," Close=")">
						#{deployment}
					</For>
				</If>
				<If Test="orQueryObject.superProcessInstanceId != null">
					<!-- A sub process instance is stored under a certain *execution*, potentially nested.
                 A sub process instance is NOT stored under the process instanc, hence the following: -->
					or RES.SUPER_EXEC_ IN (select ID_ from ACT_RU_EXECUTION where PROC_INST_ID_ = #{orQueryObject.superProcessInstanceId})
				</If>
				<If Test="orQueryObject.subProcessInstanceId != null">
					or RES.ID_ = (select PROC_INST_ID_ from ACT_RU_EXECUTION where ID_ = (select SUPER_EXEC_ from ACT_RU_EXECUTION where ID_ = #{orQueryObject.subProcessInstanceId}))
				</If>
				<If Test="orQueryObject.excludeSubprocesses">
					or RES.SUPER_EXEC_ is null
				</If>
				<If Test="orQueryObject.suspensionState != null">
					<If Test="orQueryObject.suspensionState.stateCode == 1">
						or (RES.SUSPENSION_STATE_ = 1)
					</If>
					<If Test="orQueryObject.suspensionState.stateCode == 2">
						or (RES.SUSPENSION_STATE_ = 2)
					</If>
				</If>
				<If Test="orQueryObject.tenantId != null">
					or RES.TENANT_ID_ = #{orQueryObject.tenantId}
				</If>
				<If Test="orQueryObject.tenantIdLike != null">
					or RES.TENANT_ID_ like #{orQueryObject.tenantIdLike}${wildcardEscapeClause}
				</If>
				<If Test="orQueryObject.withoutTenantId">
					or (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
				</If>
				<If Test="orQueryObject.name != null">
					or RES.NAME_ = #{orQueryObject.name}
				</If>
				<If Test="orQueryObject.nameLike != null">
					or RES.NAME_ like #{orQueryObject.nameLike}${wildcardEscapeClause}
				</If>
				<If Test="orQueryObject.nameLikeIgnoreCase != null">
					or lower(RES.NAME_) like #{orQueryObject.nameLikeIgnoreCase}${wildcardEscapeClause}
				</If>
				<If Test="orQueryObject.involvedUser != null">
					or EXISTS(select ID_ from ACT_RU_IDENTITYLINK I where I.PROC_INST_ID_ = RES.ID_ and I.USER_ID_ = #{orQueryObject.involvedUser})
				</If>
				<!-- PLEASE NOTE: If you change anything have a look into the HistoricVariableInstance & HistoricProcessInstance, the same query object is used there! -->
				<For Property="orQueryObject.queryVariableValues" Index="index" Key="queryVariableValue">
					or
					<IsNotNull Property="!queryVariableValue.local">
						<!-- When process instance variable is queried for, only process variables are taken into account -->
						and A_OR${orIndex}.EXECUTION_ID_ = A_OR${orIndex}.PROC_INST_ID_
					</IsNotNull>
					<IsNotNull Property="queryVariableValue.name != null">
						<!-- Match-all variable-names when name is null -->
						and A_OR${orIndex}.NAME_= #{queryVariableValue.name}
					</IsNotNull>
					<IsNotNull Property="queryVariableValue.type != 'null'">
						<!-- When operator is not-equals or type of value is null, type doesn't matter! -->
						and A_OR${orIndex}.TYPE_ = #{queryVariableValue.type}
					</IsNotNull>
					<IsNotNull Property="queryVariableValue.textValue != null and queryVariableValue.longValue == null and queryVariableValue.doubleValue == null">
						<Switch>
							<Case Property="queryVariableValue.operator == 'EQUALS_IGNORE_CASE' or queryVariableValue.operator == 'NOT_EQUALS_IGNORE_CASE' or queryVariableValue.operator == 'LIKE_IGNORE_CASE'">
								and lower(A_OR${orIndex}.TEXT_)
							</Case>
							<Default>
								and A_OR${orIndex}.TEXT_
							</Default>
						</Switch>
						<Switch>
							<Case Property="queryVariableValue.operator == 'LIKE' or queryVariableValue.operator == 'LIKE_IGNORE_CASE'">LIKE</Case>
							<Default>
								<Include RefId="executionVariableOperator" />
							</Default>
						</Switch>
						#{queryVariableValue.textValue}
						<Switch>
							<Case Property="queryVariableValue.operator == 'LIKE' or queryVariableValue.operator == 'LIKE_IGNORE_CASE'">
								${wildcardEscapeClause}
							</Case>
						</Switch>
					</IsNotNull>
					<IsNotNull Property="queryVariableValue.textValue2 != null">
						and A_OR${orIndex}.TEXT2_
						<Switch>
							<Case Property="queryVariableValue.operator == 'LIKE'">LIKE</Case>
							<Default>
								<Include RefId="executionVariableOperator" />
							</Default>
						</Switch>
						#{queryVariableValue.textValue2}
						<Switch>
							<Case Property="queryVariableValue.operator == 'LIKE'">${wildcardEscapeClause}</Case>
						</Switch>
					</IsNotNull>
					<IsNotNull Property="queryVariableValue.longValue != null">
						and A_OR${orIndex}.LONG_
						<Include RefId="executionVariableOperator" />
						#{queryVariableValue.longValue}
					</IsNotNull>
					<IsNotNull Property="queryVariableValue.doubleValue != null">
						and A_OR${orIndex}.DOUBLE_
						<Include RefId="executionVariableOperator" />
						#{queryVariableValue.doubleValue}
					</IsNotNull>
					<!-- Null variable type -->
					<IsNotNull Property="queryVariableValue.textValue == null and queryVariableValue.textValue2 == null and queryVariableValue.longValue == null and queryVariableValue.doubleValue == null">
						<Switch>
							<Case Property="queryVariableValue.operator == 'NOT_EQUALS'">
								and (A_OR${orIndex}.TEXT_ is not null or A_OR${orIndex}.TEXT2_ is not null or A_OR${orIndex}.LONG_ is not null or A_OR${orIndex}.DOUBLE_ is not null or A_OR${orIndex}.BYTEARRAY_ID_ is not null)
							</Case>
							<Default>
								and A_OR${orIndex}.TEXT_ is null and A_OR${orIndex}.TEXT2_ is null and A_OR${orIndex}.LONG_ is null and A_OR${orIndex}.DOUBLE_ is null and A_OR${orIndex}.BYTEARRAY_ID_ is null
							</Default>
						</Switch>
					</IsNotNull>
				</For>
			</For>
			<If Test="onlyProcessInstances and IsWithException">
				and (JOB.EXCEPTION_MSG_ is not null or JOB.EXCEPTION_STACK_ID_ is not null)
			</If>
			<IsNotNull Property="startedBefore">
				and RES.START_TIME_ &lt;= #{startedBefore}
			</IsNotNull>
			<IsNotNull Property="startedAfter">
				and RES.START_TIME_ &gt;= #{startedAfter}
			</IsNotNull>
			<IsNotNull Property="startedBy">
				and RES.START_USER_ID_ = #{startedBy}
			</IsNotNull>
		</Where>
	</Statement>

	<Statement Id="selectExecutionsByQueryCriteriaSql">
		from ACT_RU_EXECUTION RES
		inner join ACT_RE_PROCDEF P on RES.PROC_DEF_ID_ = P.ID_
		<Include RefId="commonSelectExecutionsByQueryCriteriaSql"/>
	</Statement>

	<Statement Id="selectProcessInstanceWithVariablesByQueryCriteriaSql">
		from ACT_RU_EXECUTION RES
		inner join ACT_RE_PROCDEF P on RES.PROC_DEF_ID_ = P.ID_
		<IsTrue Property="includeProcessVariables">
			left outer join ACT_RU_VARIABLE VAR ON RES.PROC_INST_ID_ = VAR.EXECUTION_ID_ and VAR.TASK_ID_ is null
		</IsTrue>
		<Include RefId="commonSelectExecutionsByQueryCriteriaSql"/>
	</Statement>

	<Statement Id="selectProcessInstanceWithVariablesByQueryCriteriaColumns">
		${limitBefore}
		<IsNotEqual Property="_databaseId" CompareValue="db2">
			<IsNotEqual Property="_databaseId" CompareValue="mssql">
				select distinct ${top100} RES.*, P.KEY_ as ProcessDefinitionKey, P.ID_ as ProcessDefinitionId, P.NAME_ as ProcessDefinitionName, P.VERSION_ as ProcessDefinitionVersion, P.DEPLOYMENT_ID_ as DeploymentId,
				VAR.ID_ as VAR_ID_, VAR.NAME_ as VAR_NAME_, VAR.TYPE_ as VAR_TYPE_, VAR.REV_ as VAR_REV_,
				VAR.PROC_INST_ID_ as VAR_PROC_INST_ID_, VAR.EXECUTION_ID_ as VAR_EXECUTION_ID_, VAR.TASK_ID_ as VAR_TASK_ID_,
				VAR.BYTEARRAY_ID_ as VAR_BYTEARRAY_ID_, VAR.DOUBLE_ as VAR_DOUBLE_,
				VAR.TEXT_ as VAR_TEXT_, VAR.TEXT2_ as VAR_TEXT2_, VAR.LONG_ as VAR_LONG_
				${limitBetween}
			</IsNotEqual>
		</IsNotEqual>
		<If Test="_databaseId == &quot;db2&quot; or _databaseId == &quot;mssql&quot;">
			select distinct TEMPRES_ID_ as ID_, TEMPP_KEY_ as ProcessDefinitionKey, TEMPP_ID_ as ProcessDefinitionId, TEMPP_NAME_ as ProcessDefinitionName, TEMPP_VERSION_ as ProcessDefinitionVersion, TEMPP_DEPLOYMENT_ID_ as DeploymentId,
			TEMPRES_REV_ as REV_, TEMPRES_ACT_ID_ as ACT_ID_,
			TEMPRES_BUSINESS_KEY_ as BUSINESS_KEY_, TEMPRES_IS_ACTIVE_ as IS_ACTIVE_,
			TEMPRES_IS_CONCURRENT_ as IS_CONCURRENT_, TEMPRES_IS_SCOPE_ as IS_SCOPE_,
			TEMPRES_IS_EVENT_SCOPE_ as IS_EVENT_SCOPE_, TEMPRES_IS_MI_ROOT_ as IS_MI_ROOT_,
			TEMPRES_PARENT_ID_ as PARENT_ID_, TEMPRES_PROC_INST_ID_ as PROC_INST_ID_,
			TEMPRES_SUPER_EXEC_ as SUPER_EXEC_, TEMPRES_PROC_DEF_ID_ as PROC_DEF_ID_,
			TEMPRES_NAME_ as NAME_, TEMPRES_TENANT_ID_ as TENANT_ID_,
			TEMPRES_SUSPENSION_STATE_ as SUSPENSION_STATE_,
			TEMPRES_START_TIME_ as START_TIME_, TEMPRES_START_USER_ID_ as START_USER_ID_,
			TEMPRES_START_USER_ as START_USER_,
			TEMPRES_IS_COUNT_ENABLED_ as IS_COUNT_ENABLED_,
			TEMPRES_EVT_SUBSCR_COUNT_ as EVT_SUBSCR_COUNT_,
			TEMPRES_TASK_COUNT_ as TASK_COUNT_,
			TEMPRES_JOB_COUNT_ as JOB_COUNT_,
			TEMPRES_TIMER_JOB_ as TIMER_JOB_COUNT_,
			TEMPRES_SUSP_JOB_COUNT_ as SUSP_JOB_COUNT_,
			TEMPRES_DEADLETTER_JOB_COUNT_ as DEADLETTER_JOB_COUNT_,
			TEMPRES_VAR_COUNT_ as VAR_COUNT_,
			TEMPRES_ID_LINK_COUNT_ as ID_LINK_COUNT_,
			TEMPVAR_ID_ as VAR_ID_, TEMPVAR_NAME_ as VAR_NAME_, TEMPVAR_TYPE_ as VAR_TYPE_, TEMPVAR_REV_ as VAR_REV_,
			TEMPVAR_PROC_INST_ID_ as VAR_PROC_INST_ID_, TEMPVAR_EXECUTION_ID_ as VAR_EXECUTION_ID_, TEMPVAR_TASK_ID_ as VAR_TASK_ID_,
			TEMPVAR_BYTEARRAY_ID_ as VAR_BYTEARRAY_ID_, TEMPVAR_DOUBLE_ as VAR_DOUBLE_,
			TEMPVAR_TEXT_ as VAR_TEXT_, TEMPVAR_TEXT2_ as VAR_TEXT2_, TEMPVAR_LONG_ as VAR_LONG_
			${limitOuterJoinBetween}
			RES.ID_ as TEMPRES_ID_, RES.REV_ as TEMPRES_REV_, P.KEY_ as TEMPP_KEY_, P.ID_ as TEMPP_ID_, P.NAME_ as TEMPP_NAME_, P.VERSION_ as TEMPP_VERSION_, P.DEPLOYMENT_ID_ as TEMPP_DEPLOYMENT_ID_,

			RES.ACT_ID_ as TEMPRES_ACT_ID_,
			RES.PROC_INST_ID_ as TEMPRES_PROC_INST_ID_,
			RES.BUSINESS_KEY_ as TEMPRES_BUSINESS_KEY_,
			RES.IS_ACTIVE_ as TEMPRES_IS_ACTIVE_,
			RES.IS_CONCURRENT_ as TEMPRES_IS_CONCURRENT_,
			RES.IS_SCOPE_ as TEMPRES_IS_SCOPE_,
			RES.IS_EVENT_SCOPE_ as TEMPRES_IS_EVENT_SCOPE_,
			RES.IS_MI_ROOT_ as TEMPRES_IS_MI_ROOT_,
			RES.PARENT_ID_ as TEMPRES_PARENT_ID_,
			RES.SUPER_EXEC_ as TEMPRES_SUPER_EXEC_,
			RES.SUSPENSION_STATE_ as TEMPRES_SUSPENSION_STATE_,
			RES.PROC_DEF_ID_ as TEMPRES_PROC_DEF_ID_,
			RES.NAME_ as TEMPRES_NAME_,
			RES.TENANT_ID_ as TEMPRES_TENANT_ID_,
			RES.START_TIME_ as TEMPRES_START_TIME_,
			RES.START_USER_ID_ as TEMPRES_START_USER_ID_,
			RES.START_USER_ as TEMPRES_START_USER_,

			RES.IS_COUNT_ENABLED_ as TEMPRES_IS_COUNT_ENABLED_,
			RES.EVT_SUBSCR_COUNT_ as TEMPRES_EVT_SUBSCR_COUNT_,
			RES.TASK_COUNT_ as TEMPRES_TASK_COUNT_,
			RES.JOB_COUNT_ as TEMPRES_JOB_COUNT_,
			RES.TIMER_JOB_COUNT_ as TEMPRES_TIMER_JOB_,
			RES.SUSP_JOB_COUNT_ as TEMPRES_SUSP_JOB_COUNT_,
			RES.DEADLETTER_JOB_COUNT_ as TEMPRES_DEADLETTER_JOB_COUNT_,
			RES.VAR_COUNT_ as TEMPRES_VAR_COUNT_,
			RES.ID_LINK_COUNT_ as TEMPRES_ID_LINK_COUNT_,

			VAR.ID_ as TEMPVAR_ID_, VAR.NAME_ as TEMPVAR_NAME_, VAR.TYPE_ as TEMPVAR_TYPE_, VAR.REV_ as TEMPVAR_REV_,
			VAR.PROC_INST_ID_ as TEMPVAR_PROC_INST_ID_, VAR.EXECUTION_ID_ as TEMPVAR_EXECUTION_ID_, VAR.TASK_ID_ as TEMPVAR_TASK_ID_,
			VAR.BYTEARRAY_ID_ as TEMPVAR_BYTEARRAY_ID_, VAR.DOUBLE_ as TEMPVAR_DOUBLE_,
			VAR.TEXT_ as TEMPVAR_TEXT_, VAR.TEXT2_ as TEMPVAR_TEXT2_, VAR.LONG_ as TEMPVAR_LONG_
		</If>
	</Statement>

	<Statement Id="selectExecutionsFromSql">
		select E.*, S.PROC_INST_ID_ AS PARENT_PROC_INST_ID_
		from ACT_RU_EXECUTION E LEFT OUTER JOIN ACT_RU_EXECUTION S ON E.SUPER_EXEC_ = S.ID_
	</Statement>

	<Select Id="selectExecutionsWithSameRootProcessInstanceId" ResultMap="executionResultMap" >
		<Include RefId="selectExecutionsFromSql"/>
		where E.ROOT_PROC_INST_ID_ = (select ROOT_PROC_INST_ID_ from ACT_RU_EXECUTION where ID_ = #{parameter})
	</Select>

	<Select Id="selectExecution" ResultMap="executionResultMap" >
		<Include RefId="selectExecutionsFromSql"/>
		where E.ID_ = #{id}
	</Select>

	<Select Id="selectExecutionsByParentExecutionId"  ResultMap="executionResultMap">
		<Include RefId="selectExecutionsFromSql"/>
		where E.PARENT_ID_ = #{parentExecutionId}
	</Select>

	<Select Id="selectExecutionsByRootProcessInstanceId" ResultMap="executionResultMap" >
		<Include RefId="selectExecutionsFromSql"/>
		where E.ROOT_PROC_INST_ID_ = #{rootProcessInstanceId}
	</Select>

	<Select Id="selectChildExecutionsByProcessInstanceId" ResultMap="executionResultMap" >
		<Include RefId="selectExecutionsFromSql"/>
		where E.PROC_INST_ID_ = #{processInstanceId} and E.PARENT_ID_ is not null
	</Select>

	<Select Id="selectExecutionsByProcessInstanceId" ResultMap="executionResultMap" >
		<Include RefId="selectExecutionsFromSql"/>
		where E.PROC_INST_ID_ = #{processInstanceId}
	</Select>

	<Select Id="selectProcessInstanceIdsByProcessDefinitionId" >
		select ID_
		from ACT_RU_EXECUTION
		where PROC_DEF_ID_ = #{processDefinitionId} and PARENT_ID_ is null
	</Select>

	<Select Id="selectInactiveExecutionsForProcessInstance" ResultMap="executionResultMap" >
		<Include RefId="selectExecutionsFromSql"/>
		where E.PROC_INST_ID_ = #{processInstanceId}
		and E.IS_ACTIVE_ = #{isActive}
	</Select>

	<Select Id="selectInactiveExecutionsInActivityAndProcessInstance" ResultMap="executionResultMap" >
		<Include RefId="selectExecutionsFromSql"/>
		where E.ACT_ID_ = #{activityId}
		and E.PROC_INST_ID_ = #{processInstanceId}
		and E.IS_ACTIVE_ = #{isActive}
	</Select>

	<Select Id="selectExecutionsByParentExecutionAndActivityIds" ResultMap="executionResultMap" >
		<Include RefId="selectExecutionsFromSql"/>
		where E.PARENT_ID_ = #{parentExecutionId}
		and E.ACT_ID_ in
		<For Key="p" Property="activityIds" Open="(" Separator="," Close=")">
			#{activityId}
		</For>
	</Select>

	<Select Id="selectExecutionsByQueryCriteria" ResultMap="executionResultMap">
		${limitBefore}
		select distinct ${top100} RES.ID_, RES.REV_, RES.PROC_INST_ID_, RES.BUSINESS_KEY_, RES.PROC_DEF_ID_, RES.ACT_ID_, RES.IS_ACTIVE_, RES.IS_CONCURRENT_, RES.IS_SCOPE_, RES.IS_EVENT_SCOPE_, RES.IS_MI_ROOT_, RES.PARENT_ID_, RES.SUPER_EXEC_, RES.ROOT_PROC_INST_ID_, RES.SUSPENSION_STATE_, RES.TENANT_ID_, RES.NAME_, RES.START_TIME_, RES.START_USER_ID_, RES.START_USER_, RES.IS_COUNT_ENABLED_, RES.EVT_SUBSCR_COUNT_, RES.TASK_COUNT_, RES.JOB_COUNT_, RES.TIMER_JOB_COUNT_, RES.SUSP_JOB_COUNT_, RES.DEADLETTER_JOB_COUNT_, RES.VAR_COUNT_, RES.ID_LINK_COUNT_ ${limitBetween}, P.KEY_ as ProcessDefinitionKey, P.ID_ as ProcessDefinitionId
		<Include RefId="selectExecutionsByQueryCriteriaSql"/>
		${orderBy}
		${limitAfter}
	</Select>

	<Select Id="selectExecutionCountByQueryCriteria" >
		select distinct count(RES.ID_)
		<Include RefId="selectExecutionsByQueryCriteriaSql"/>
	</Select>

	<!--  same as selectExecutionsByQueryCriteria, but with different parameterType -->
	<Select Id="selectProcessInstanceByQueryCriteria" ResultMap="processInstanceResultMap" >
		${limitBefore}
		select distinct ${top100} RES.ID_, RES.REV_, RES.PROC_INST_ID_, RES.BUSINESS_KEY_, RES.PROC_DEF_ID_, RES.ACT_ID_, RES.IS_ACTIVE_, RES.IS_CONCURRENT_, RES.IS_SCOPE_, RES.IS_EVENT_SCOPE_, RES.IS_MI_ROOT_, RES.PARENT_ID_, RES.SUPER_EXEC_, RES.ROOT_PROC_INST_ID_, RES.SUSPENSION_STATE_, RES.TENANT_ID_, RES.NAME_, RES.START_TIME_, RES.START_USER_ID_, RES.START_USER_, RES.IS_COUNT_ENABLED_, RES.EVT_SUBSCR_COUNT_, RES.TASK_COUNT_, RES.JOB_COUNT_, RES.TIMER_JOB_COUNT_, RES.SUSP_JOB_COUNT_, RES.DEADLETTER_JOB_COUNT_, RES.VAR_COUNT_, RES.ID_LINK_COUNT_  ${limitBetween}, P.KEY_ as ProcessDefinitionKey, P.ID_ as ProcessDefinitionId, P.NAME_ as ProcessDefinitionName, P.VERSION_ as ProcessDefinitionVersion, P.DEPLOYMENT_ID_ as DeploymentId
		<Include RefId="selectExecutionsByQueryCriteriaSql"/>
		${orderBy}
		${limitAfter}
	</Select>

	<Select Id="selectProcessInstanceCountByQueryCriteria" >
		select count(distinct RES.ID_)
		<Include RefId="selectExecutionsByQueryCriteriaSql"/>
	</Select>

	<Select Id="selectProcessInstanceWithVariablesByQueryCriteria" ResultMap="processInstanceAndVariablesResultMap" >
		<Include RefId="selectProcessInstanceWithVariablesByQueryCriteriaColumns"/>
		<Include RefId="selectProcessInstanceWithVariablesByQueryCriteriaSql"/>
		${orderBy}
		${limitAfter}
	</Select>

	<Select Id="selectSubProcessInstanceBySuperExecutionId" ResultMap="executionResultMap" >
		select ID_, REV_, PROC_INST_ID_, BUSINESS_KEY_, PROC_DEF_ID_, ACT_ID_, IS_ACTIVE_, IS_CONCURRENT_, IS_SCOPE_, IS_EVENT_SCOPE_, IS_MI_ROOT_, PARENT_ID_, SUPER_EXEC_, ROOT_PROC_INST_ID_, SUSPENSION_STATE_, TENANT_ID_, NAME_, START_TIME_, START_USER_ID_, START_USER_, IS_COUNT_ENABLED_, EVT_SUBSCR_COUNT_, TASK_COUNT_, JOB_COUNT_, TIMER_JOB_COUNT_, SUSP_JOB_COUNT_, DEADLETTER_JOB_COUNT_, VAR_COUNT_, ID_LINK_COUNT_
		from ACT_RU_EXECUTION
		where SUPER_EXEC_ = #{superExecutionId}
	</Select>


	<!--<Include RefId="Sys.Workflow.Engine.db.common.selectByNativeQuery"/>-->
	<Select Id="selectExecutionByNativeQuery" >
	</Select>

	<Select Id="selectExecutionCountByNativeQuery" >
		${sql}
	</Select>

</SmartSqlMap>