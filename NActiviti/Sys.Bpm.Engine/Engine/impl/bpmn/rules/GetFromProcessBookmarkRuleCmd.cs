///////////////////////////////////////////////////////////
//  GetDutyBookmarkRuleCmd.cs
//  Implementation of the Class GetDutyBookmarkRuleCmd
//  Generated by Enterprise Architect
//  Created on:      30-1月-2019 8:32:00
//  Original author: 张楠
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Sys.Workflow.Engine.Impl.Interceptor;
using Microsoft.Extensions.Options;
using System.Linq;
using Sys.Expressions;
using Newtonsoft.Json.Linq;
using Sys.Workflow.Engine.Impl.Contexts;

namespace Sys.Workflow.Engine.Bpmn.Rules
{
    /// <summary>
    /// 获取岗位下所有用户信息
    /// </summary>
    [GetBookmarkDescriptor(RequestUserCategory.GETUSERS_FROM_PROCESS)]
    public class GetFromProcessBookmarkRuleCmd : BaseGetBookmarkRule
    {
        private readonly ExternalConnectorProvider externalConnector;
        /// <inheritdoc />
        public GetFromProcessBookmarkRuleCmd()
        {
            externalConnector = ProcessEngineServiceProvider.Resolve<ExternalConnectorProvider>();
        }

        /// <inheritdoc />
        public override IList<IUserInfo> Execute(ICommandContext commandContext)
        {
            List<IUserInfo> users = new List<IUserInfo>();
            var qc = this.Condition?.QueryCondition?.FirstOrDefault();
            if (qc is null)
            {
                return users;
            }

            object condition = ExpressionManager.GetValue(Execution, qc.Id, null);
            if (condition is null)
            {
                return users;
            }

            IGetBookmarkRuleProvider ruleProvider = ProcessEngineServiceProvider.Resolve<IGetBookmarkRuleProvider>();

            var actors = JToken.FromObject(condition).ToObject<QueryBookmark[]>();
            foreach (QueryBookmark query in actors ?? Array.Empty<QueryBookmark>())
            {
                IGetBookmarkRule rule = ruleProvider.CreateBookmarkRule(query.RuleType.ToString());
                rule.Execution = Execution;
                rule.Condition = query;
                var us = Context.ProcessEngineConfiguration.CommandExecutor.Execute(rule);
                users.AddRange(us);
            }

            return users;
        }
    }
}