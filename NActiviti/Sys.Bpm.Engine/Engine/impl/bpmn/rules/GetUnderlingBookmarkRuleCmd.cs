///////////////////////////////////////////////////////////
//  GetUnderlingsBookmarkRuleCmd.cs
//  Implementation of the Class GetUnderlingsBookmarkRuleCmd
//  Generated by Enterprise Architect
//  Created on:      30-1月-2019 8:32:00
//  Original author: 张楠
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Sys.Workflow.Engine.Impl.Interceptor;
using Microsoft.Extensions.Options;
using System.Linq;
using Sys.Workflow.Engine.History;
using Sys.Workflow.Services.Api.Commands;

namespace Sys.Workflow.Engine.Bpmn.Rules
{
    /// <summary>
    /// 获取用户的所有下属及子下属
    /// </summary>
    [GetBookmarkDescriptor(RequestUserCategory.GETUSERS_UNDERLING)]
    public class GetUnderlingBookmarkRuleCmd : BaseGetBookmarkRule
    {
        private readonly ExternalConnectorProvider externalConnector;
        /// <inheritdoc />
        public GetUnderlingBookmarkRuleCmd()
        {
            externalConnector = ProcessEngineServiceProvider.Resolve<ExternalConnectorProvider>();
        }
        /// <inheritdoc />
        public override IList<IUserInfo> Execute(ICommandContext commandContext)
        {
            IUserServiceProxy proxy = ProcessEngineServiceProvider.Resolve<IUserServiceProxy>();

            string id = Condition.QueryCondition.FirstOrDefault().Id;
            string[] users = null;
            if (string.IsNullOrWhiteSpace(id))
            {
                var uid = this.Execution.GetVariable<string>(WorkflowVariable.PROCESS_START_USERID);
                users = new string[] { uid };
            }
            else
            {
                var hisService = commandContext.ProcessEngineConfiguration.HistoryService;
                users = hisService.CreateHistoricTaskInstanceQuery()
                    .SetProcessInstanceId(this.Execution.ProcessInstanceId)
                    .SetTaskDefinitionKey(id)
                    .List()
                    .Select(x => x.Assignee)
                    .ToArray();
            }

            return proxy.GetUsers(externalConnector.GetUserByUnderling, new RequestUserParameter
            {
                IdList = users,
                Category = RequestUserCategory.GETUSERS_UNDERLING
            }).ConfigureAwait(false).GetAwaiter().GetResult();
        }
    }
}