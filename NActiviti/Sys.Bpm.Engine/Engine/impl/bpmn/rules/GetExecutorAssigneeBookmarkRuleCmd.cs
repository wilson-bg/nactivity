///////////////////////////////////////////////////////////
//  GetExecutorBookmarkRuleCmd.cs
//  Implementation of the Class GetExecutorBookmarkRuleCmd
//  Generated by Enterprise Architect
//  Created on:      30-1月-2019 8:32:00
//  Original author: 张楠
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Sys.Workflow.Engine.Impl.Interceptor;
using Microsoft.Extensions.Options;
using Sys.Workflow.Engine.Impl.Persistence.Entity;
using Sys.Workflow.Engine.Repository;
using Sys.Workflow.Bpmn.Models;
using System.Linq;
using Sys.Workflow.Engine.Tasks;
using Sys.Workflow.Engine.History;
using Sys.Net.Http;

namespace Sys.Workflow.Engine.Bpmn.Rules
{
    /// <summary>
    /// 获取当前执行人的用户信息
    /// </summary>
    [GetBookmarkDescriptor(RequestUserCategory.GETUSER_EXECUTOR_ASSIGNEE)]
    public class GetExecutorAssigneeBookmarkRuleCmd : BaseGetBookmarkRule
    {
        private readonly ExternalConnectorProvider externalConnector;
        /// <inheritdoc />
        public GetExecutorAssigneeBookmarkRuleCmd()
        {
            externalConnector = ProcessEngineServiceProvider.Resolve<ExternalConnectorProvider>();
        }
        /// <inheritdoc />
        public override IList<IUserInfo> Execute(ICommandContext commandContext)
        {
            var cond = this.Condition.QueryCondition.FirstOrDefault();
            if (cond is null)
            {
                return null;
            }

            IList<IHistoricTaskInstance> hisTasks = commandContext.ProcessEngineConfiguration.HistoryService
                .CreateHistoricTaskInstanceQuery()
                .SetTaskDefinitionKey(cond.Id)
                .SetProcessDefinitionId(this.Execution.ProcessDefinitionId)
                .OrderByHistoricTaskInstanceEndTime()
                .Desc()
                .List()
                .Select(x =>
                {
                    if (x is HistoricScopeInstanceEntityImpl his && his.EndTime is null)
                    {
                        his.EndTime = DateTime.MaxValue;
                    }
                    return x;
                })
                .OrderByDescending(x => x.EndTime).ToList();

            List<string> users = new List<string>();
            if (hisTasks.Any())
            {
                var procid = hisTasks[0].ProcessInstanceId;
                foreach (var task in hisTasks)
                {
                    if (task.ProcessInstanceId != procid)
                    {
                        break;
                    }
                    users.Add(task.Assignee);
                }
            }

            IUserServiceProxy proxy = ProcessEngineServiceProvider.Resolve<IUserServiceProxy>();

            return proxy.GetUsers(externalConnector.GetUser, new RequestUserParameter
            {
                IdList = users.ToArray(),
                Category = RequestUserCategory.GETUSER_USER
            }).ConfigureAwait(false).GetAwaiter().GetResult();
        }
    }
}